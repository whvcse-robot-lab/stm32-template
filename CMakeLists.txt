cmake_minimum_required(VERSION 3.5.0)

# project settings
project(FIXME C CXX ASM)
set(CMAKE_CXX_STANDARD 23)
set(CMAKE_C_STANDARD 11)
set(STM32_CPU_TYPE cortex-m4)
set(CUBEMX_PROJECT_DIR ./board)

# Enable output of compile commands during generation
set(CMAKE_EXPORT_COMPILE_COMMANDS on)

# Generic compiler settings
add_compile_options(-mthumb -mthumb-interwork)
add_compile_options(-ffunction-sections -fdata-sections -fno-common -fmessage-length=0)

add_link_options(-mthumb -mthumb-interwork)
add_link_options(-Wl,-gc-sections,--print-memory-usage,-Map=${PROJECT_BINARY_DIR}/${PROJECT_NAME}.map)

# Enable assembler files preprocessing
add_compile_options($<$<COMPILE_LANGUAGE:ASM>:-x$<SEMICOLON>assembler-with-cpp>)

# Build types
if("${CMAKE_BUILD_TYPE}" STREQUAL "Release")
    message(STATUS "Maximum optimization for speed")
    add_compile_options(-Ofast)
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "RelWithDebInfo")
    message(STATUS "Maximum optimization for speed, debug info included")
    add_compile_options(-Ofast -g)
elseif("${CMAKE_BUILD_TYPE}" STREQUAL "MinSizeRel")
    message(STATUS "Maximum optimization for size")
    add_compile_options(-Os)
else()
    message(STATUS "Minimal optimization, debug info included")
    add_compile_options(-Og -g)
endif()

# Add subroutines
list(APPEND CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR}/cmake)
include(stm32)

# Create stm32 lib
stm32_create_target(CUBEMX_DIR ${CUBEMX_PROJECT_DIR}
    TARGET_NAME ${PROJECT_NAME}.elf
    CPU_TYPE ${STM32_CPU_TYPE})

# Additional post processings
stm32_fixup_project(${PROJECT_NAME} ${CUBEMX_PROJECT_DIR} ${STM32_CPU_TYPE})

# Create Hex & Bin
stm32_create_hex(${PROJECT_NAME})
